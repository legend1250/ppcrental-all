// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PPCRental.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UC011_ChangePasswordFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "UC011_ChangePassword.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UC011_ChangePassword", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "UC011_ChangePassword")))
            {
                global::PPCRental.AcceptanceTests.Features.UC011_ChangePasswordFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Change Password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UC011_ChangePassword")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void ChangePassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change Password", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Value"});
            table1.AddRow(new string[] {
                        "username",
                        "qqqq"});
            table1.AddRow(new string[] {
                        "password",
                        "123456"});
#line 8
 testRunner.Given("I login success with the given username and password", ((string)(null)), table1, "Given ");
#line 12
 testRunner.And("I go to Change Password page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Value"});
            table2.AddRow(new string[] {
                        "Password",
                        "123456"});
            table2.AddRow(new string[] {
                        "New Password",
                        "ppc123"});
            table2.AddRow(new string[] {
                        "Cofirm Password",
                        "ppc123"});
#line 13
 testRunner.When("I input all the following fields", ((string)(null)), table2, "When ");
#line 18
 testRunner.And("I click Set new Password button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.Then("I see a message \"Your password has been changed successfully\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input wrong current Password on Change Password page")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UC011_ChangePassword")]
        public virtual void InputWrongCurrentPasswordOnChangePasswordPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input wrong current Password on Change Password page", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Value"});
            table3.AddRow(new string[] {
                        "username",
                        "md5"});
            table3.AddRow(new string[] {
                        "password",
                        "123456"});
#line 23
 testRunner.Given("I Login successfully", ((string)(null)), table3, "Given ");
#line 27
 testRunner.And("I Navigate to Change Pasword page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Value"});
            table4.AddRow(new string[] {
                        "Password",
                        "111111"});
            table4.AddRow(new string[] {
                        "New Password",
                        "ppc123"});
            table4.AddRow(new string[] {
                        "Cofirm Password",
                        "ppc123"});
#line 28
 testRunner.When("I input wrong current password", ((string)(null)), table4, "When ");
#line 33
 testRunner.And("I click Set new Password button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.Then("Show a message \"Your current password not match with the password you gave\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("New password does not meet the requirements")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UC011_ChangePassword")]
        public virtual void NewPasswordDoesNotMeetTheRequirements()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New password does not meet the requirements", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Value"});
            table5.AddRow(new string[] {
                        "username",
                        "md5"});
            table5.AddRow(new string[] {
                        "password",
                        "123456"});
#line 37
testRunner.Given("I login success with my account", ((string)(null)), table5, "Given ");
#line 41
 testRunner.And("Go to change password page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Value"});
            table6.AddRow(new string[] {
                        "Your answer",
                        "123456789"});
            table6.AddRow(new string[] {
                        "Password",
                        "123456"});
            table6.AddRow(new string[] {
                        "New Password",
                        "ad"});
            table6.AddRow(new string[] {
                        "Cofirm Password",
                        "ad"});
#line 42
 testRunner.When("I Input a new wrong password", ((string)(null)), table6, "When ");
#line 48
 testRunner.And("Click Set new Password button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.Then("There will show a message \"New Password must be at least 6 characters\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Confirm password does not match the new one")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UC011_ChangePassword")]
        public virtual void ConfirmPasswordDoesNotMatchTheNewOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Confirm password does not match the new one", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Value"});
            table7.AddRow(new string[] {
                        "username",
                        "md5"});
            table7.AddRow(new string[] {
                        "password",
                        "123456"});
#line 52
 testRunner.Given("I login to my account", ((string)(null)), table7, "Given ");
#line 56
 testRunner.And("I navigate to page Change Password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Value"});
            table8.AddRow(new string[] {
                        "Your answer",
                        "123456789"});
            table8.AddRow(new string[] {
                        "Password",
                        "123456"});
            table8.AddRow(new string[] {
                        "New Password",
                        "ppc123"});
            table8.AddRow(new string[] {
                        "Cofirm Password",
                        "ppp123"});
#line 57
 testRunner.When("I input a wrong cofirm password", ((string)(null)), table8, "When ");
#line 63
 testRunner.And("I choose the Set new Password button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.Then("It will show a message \"RePassword does not match the new password\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Current password form is empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UC011_ChangePassword")]
        public virtual void CurrentPasswordFormIsEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Current password form is empty", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Value"});
            table9.AddRow(new string[] {
                        "username",
                        "md5"});
            table9.AddRow(new string[] {
                        "password",
                        "123456"});
#line 67
 testRunner.Given("Login success to my account", ((string)(null)), table9, "Given ");
#line 71
 testRunner.And("Go to page Change Password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Value"});
            table10.AddRow(new string[] {
                        "Your answer",
                        "123456789"});
            table10.AddRow(new string[] {
                        "Password",
                        ""});
            table10.AddRow(new string[] {
                        "New Password",
                        "ppc123"});
            table10.AddRow(new string[] {
                        "Cofirm Password",
                        "ppp123"});
#line 72
 testRunner.When("I forgot to input current password form", ((string)(null)), table10, "When ");
#line 78
 testRunner.And("I click the Set new password button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.Then("It show message \"Password must not be at least empty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
